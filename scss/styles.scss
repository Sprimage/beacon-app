// ========== SCSS PREPROCESSOR MINI-LIBRARY/TOOLKIT ===========================
// Would using outside solutions be heavier than necessary?
// (e.g. autoprefixer, modernizr, -prefix-free, Prefixr, or a jQuery plugin)
// Reference: https://css-tricks.com/ordering-css3-properties/
// (S for single-line)
/// Mixin to prefix a property
/// @author Hugo Giraudel
/// @param {String} $property - Property name
/// @param {*} $value - Property value
/// @param {List} $prefixes (()) - List of prefixes to print
@mixin prefixS($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    #{'-' + $prefix + '-' + $property}: $value;
  }
  #{$property}: $value; // Output standard non-prefixed declaration
}
// (M for multi-line)
/// Mixin to prefix several properties at once
/// @author Hugo Giraudel
/// @param {Map} $declarations - Declarations to prefix
/// @param {List} $prefixes (()) - List of prefixes to print
@mixin prefixM($declarations, $prefixes: ()) {
  @each $property, $value in $declarations {
    @each $prefix in $prefixes {
      #{'-' + $prefix + '-' + $property}: $value;
    }
    #{$property}: $value; // Output standard non-prefixed declaration
  }
}
// Reference: https://css-tricks.com/snippets/sass/mixin-prefix-properties/
// =============================================================================
// ========== MAIN (S)CSS ======================================================
// =============================================================================
* { box-sizing: border-box; }
:root { // remember to set fallbacks when custom properties are applied (for IE)
  --wPanelWallet: 30ch;
  --wPanelBeacon: 40ch;
  --wPanelITTs:   45ch;
  --wPanelPOIs:   35ch;
  --borderThickness: 2px;
  --padTopBot:       1em;
  --padLftRgt:       2ch;
  --padDefaultFull:  var(--padTopBot) var(--padLftRgt);
  --padDefaultSplit: calc(var(--padTopBot) / 2) calc(var(--padLftRgt) / 2);
  --settingsOffset:  calc(1em + 2*var(--padTopBot) + 2*var(--borderThickness));
  --hDrawerHandle:   calc(1em + 2*var(--padTopBot) + 2*var(--borderThickness));
  --hDrawerHandleOffset: calc(1em + 2*var(--padTopBot));
  --colorSettings:   green;
  --colorPubLayer:   blue;
  --colorDrawerTop:  red;
  --colorDrawerBot:  purple;
} // also remember set a fallback before calcs (tedious to test)
body, p, ul { // consider using Autoprefixer, e.g. might need for transform
  -webkit-margin-before: 0;
  -webkit-margin-after: 0;
  -webkit-margin-start: 0;
  -webkit-margin-end: 0;
  margin: 0;
}
p { padding: var(--padDefaultFull, 1em); }
// ul { overflow-x: auto; overflow-y: hidden; text-overflow: ellipsis; } // ?
[title], label { cursor: pointer; }
// ========== GENERIC DOCUMENT-LEVEL RESETS ABOVE THIS LINE ====================
.clearfix::after {
  content: '';
  clear: both;
  display: table;
}
// Accordion (vertical) ... potential for a mixin (?)
.acc::before { float: left; }
.acc::after { float: right; }
.acc::before, .acc::after { content: '\27A4'; }
:not(:checked) ~ .acc::before, :not(:checked) ~ .acc::after {
  @include prefixS(transform, rotate(90deg), webkit moz ms o);
}
:checked ~ .acc::before, :checked ~ .acc::after {
  @include prefixS(transform, rotate(-90deg), webkit moz ms o);
}
// input[type=checkbox] { // boolean only (for on/off switches)
//   display: none; // hides checkboxes
//   &:not(:checked) ~ _____ { display: none; } // not checked = shut
//   &:checked ~ _____ { display: _____block; } // checked = open
// } // use radio for relatively equivalent or matter-of-preference options
// ========== LOW-SPECIFICITY COMPONENTS ABOVE THIS LINE =======================
.panel {
  border: inherit; // must pass through for .btn to inherit (?)
  height: inherit; // same as 100%
  overflow: auto; // maybe make the scroll bar skinnier as an enhancement
  input[type=checkbox] {
    display: none; // hides checkboxes
    &:not(:checked) ~ form { display: none; } // not checked = shut
    &:checked ~ form { display: block; } // checked = open
  }
  .btn, form {
    display: block;
    margin:  var(--padDefaultFull, 1em);
    border:  inherit;
    border-radius: var(--padDefaultSplit, 0.5em);
  }
  .btn {
    padding: var(--padDefaultSplit, 0.5em);
    background-color: white;
    text-align: center;
  }
  form { padding: var(--padDefaultSplit, 0.5em); }
  table { border-spacing: var(--padDefaultSplit, 0.5em); }
  td { white-space: nowrap; }
  td:nth-of-type(2) { text-align: right; }
  input[type=text] { width: 100%; }
  button.nxt, button.bck {
    margin: 0.5em 1ch; // fallback
    margin: calc(var(--padTopBot)/2) calc(var(--padLftRgt)/2);
  }
  button.nxt::after, button.bck::before {
    content: ' \27A4';
    display: inline-block;
  }
  button.nxt {
    float: right;
    &::after { margin-left: 1ch; }
  }
  button.bck {
    float: left;
    &::before { margin-right: 1ch;
      @include prefixS(transform, rotate(180deg), webkit moz ms o);
    }
  }
  input[type=submit] {
    margin: 0.5em auto; // fallback
    margin: calc(var(--padTopBot)/2) auto; // center horiz
  } 
}
// ========== MODERATE-SPECIFICITY COMPONENTS ABOVE THIS LINE ==================
#settings, #publayer, #dresserLft, #dresserRgt { position: fixed; }
#settings {
  &.togSettingsRad1 { top: 0; }
  &.togSettingsRad2 { bottom: 0; }
  width: 100%; // alternately, set { left: 0; right: 0; }
  height: var(--settingsOffset, 3em);
  border: var(--borderThickness, 1px) solid var(--colorSettings);
  ul { width: 100%; }
  ul, li { padding: var(--padDefaultSplit, 0.5em); }
  li {
    display: inline-block;
    &:hover i { color: var(--colorSettings); }
    .barBot { @include prefixS(transform, rotate(180deg), webkit moz ms o); }
    input[type=radio] {
      display: none; // hides radio dots
      &:checked ~ label { display: none; }
      &:not(:checked) ~ label { display: inline-block; }
    }
  } // if selected, show icon of opposite option
}
#publayer {
  &.togSettingsRad1 {
    top: var(--settingsOffset, 3em);
    bottom: 0;
  }
  &.togSettingsRad2 {
    top: 0;
    bottom: var(--settingsOffset, 3em); 
  }
  width: 100%; // alternately, set { left: 0; right: 0; }
  border: var(--borderThickness, 1px) solid var(--colorPubLayer);
  * { text-align: center; }
  nav {
    height: var(--settingsOffset, 3em);
    border: inherit;
  }
}
#dresserLft, #dresserRgt {
  &.togSettingsRad1 {
    top: 6em; // fallback
    top: calc(var(--borderThickness) + 2 * var(--settingsOffset));
      // adjust formula if settings bar & pub layer nav are not equal height
    bottom: var(--borderThickness, 1px);
  }
  &.togSettingsRad2 {
    top: 3em; // fallback
    top: calc(var(--borderThickness) + var(--settingsOffset));
    bottom: 3em; // fallback
    bottom: calc(var(--borderThickness) + var(--settingsOffset));
  }
  .drawerTop {
    border: var(--borderThickness) solid var(--colorDrawerTop);
    label:hover { color: var(--colorDrawerTop); }
  }
  .drawerBot {
    border: var(--borderThickness) solid var(--colorDrawerBot);
    label:hover { color: var(--colorDrawerBot); }
  }
}
#dresserLft {
  .handle { @include prefixM((
      transform: rotate(-90deg) translateX(var(--borderThickness, 1px)),
      transform-origin: top right, // order matters with transforms
    ), webkit moz ms o);
    right: var(--hDrawerHandleOffset, 3em);
    // wishlist: for li { direction: rtl; } to work on elements (not just text)
  }
  .drawerTop, .drawerBot {
    float: left;
    &::after { // ghost
      content: '\00a0';
      display: inline-block;
      float: right;
      width: var(--hDrawerHandleOffset, 3em);
    }
  }
}
#dresserRgt {
  right: 0;
  .handle { // complains if fallback isn't listed separately
    @include prefixS(
      transform, rotate(90deg) translateX(-1px), webkit moz ms o); // fallback
    @include prefixM((
      transform: rotate(90deg) translateX(calc(-1*var(--borderThickness))),
      transform-origin: top left, // order matters with transforms
    ), webkit moz ms o);
  }
  .drawerTop, .drawerBot {
    float: right;
    &::before { // ghost
      content: '\00a0';
      display: inline-block;
      float: left;
      width: var(--hDrawerHandleOffset, 3em);
    }
  }
}
.drawerTop, .drawerBot {
  position: relative; // on parent of .handle w/position: absolute;
  display: inline-block;
  height: 100%;
  background-color: silver;
  input[type=checkbox] {
    display: none; // hides checkboxes
    &:not(:checked) ~ .panel { display: none; } // not checked = shut
    &:checked ~ .panel { display: inline-block; } // checked = open
    &:checked + label i.fas {
      @include prefixS(transform, rotate(180deg), webkit moz ms o);
    }
  }
  .handle {
    z-index: 1;
    border: inherit;
    position: absolute;
    background-color: inherit;
    max-height: var(--hDrawerHandle, 3em);
    overflow: hidden; // wishlist: #dresserLft .handle li { direction: rtl; }
    text-align: center;
    ul { width: 100%; } // decided against inherit
    ul, li { padding: var(--padDefaultSplit, 0.5em); }
    li { display: inline-block; } // flexbox ignores { float: right; } elements
    li.endLft { float: left; }
    li.endRgt { float: right; }
  }
}
#wallet .panel { width: var(--wPanelWallet); }
#beacon .panel { width: var(--wPanelBeacon); }
#itts   .panel { width: var(--wPanelITTs); }
#pois   .panel { width: var(--wPanelPOIs); }