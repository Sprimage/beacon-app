// ========== Reference: 80-character line =====================================

* { box-sizing: border-box; }
:root { // remember to set fallbacks when custom properties are applied (for IE)
  --tstborderwidth: 2px;
  --settingsoffset: calc(3em + 2 * var(--tstborderwidth));
  --topbottompaddg: 1em;
  --leftrightpaddg: 2ch;
  --defaultpadding: var(--topbottompaddg) var(--leftrightpaddg);
  --defsplitpaddng: calc(var(--topbottompaddg) / 2)
                    calc(var(--leftrightpaddg) / 2);
  --dwhandleheight: calc(1em + 2 * var(--topbottompaddg)
                             + 2 * var(--tstborderwidth));
  --panelwidthbeac: 40ch;
  --panelwidthitts: 45ch;
  --panelwidthpois: 35ch;
  --panelwidthwall: 30ch;
}
body, p, ul { // consider using Autoprefixer, e.g. might need for transform
  -webkit-margin-before: 0;
  -webkit-margin-after: 0;
  -webkit-margin-start: 0;
  -webkit-margin-end: 0;
  margin: 0;
}
p { padding: var(--defaultpadding, 1em); }
#settings, #publayer, #dresserLft, #dresserRgt { position: fixed; }
#settings {
  &.togSettingsRad1 { top: 0; }
  &.togSettingsRad2 { bottom: 0; }
  width: 100%; // alternately, set { left: 0; right: 0; }
  height: var(--settingsoffset, 3em);
  border: var(--tstborderwidth, 1px) solid green;
  ul { width: 100%; }
  ul, li { padding: var(--defsplitpaddng, 0.5em); }
  li {
    display: inline-block;
    &:hover i { color: green; }
    .barBot { transform: rotate(180deg); }
    input[type=radio] {
      display: none; // hides radio dots
      &:checked ~ label { display: none; }
      &:not(:checked) ~ label { display: inline-block; }
    }
  } // if selected, show icon of opposite option
}
#publayer {
  &.togSettingsRad1 {
    top: var(--settingsoffset, 3em);
    bottom: 0;
  }
  &.togSettingsRad2 {
    top: 0;
    bottom: var(--settingsoffset, 3em); 
  }
  width: 100%; // alternately, set { left: 0; right: 0; }
  border: var(--tstborderwidth, 1px) solid blue;
  * { text-align: center; }
  nav {
    height: var(--settingsoffset, 3em);
    border: inherit;
  }
}
#dresserLft, #dresserRgt {
  &.togSettingsRad1 {
    top: calc(var(--tstborderwidth) + 2 * var(--settingsoffset));
      // adjust formula if settings bar & pub layer nav are not equal height
    bottom: var(--tstborderwidth);
  }
  &.togSettingsRad2 {
    top: calc(var(--tstborderwidth) + var(--settingsoffset));
    bottom: calc(var(--tstborderwidth) + var(--settingsoffset));
  }
  .drawerTop {
    border: var(--tstborderwidth) solid red;
    label:hover { color: red; }
  }
  .drawerBot {
    border: var(--tstborderwidth) solid purple;
    label:hover { color: purple; }
  }
}
#dresserLft {
  .handle {
    transform: rotate(-90deg) translateX(var(--tstborderwidth, 1px));
    transform-origin: top right; // order matters with transforms
    right: var(--dwhandleheight, 3em);
    // wishlist: for li { direction: rtl; } to work on elements (not just text)
  }
  .drawerTop, .drawerBot {
    float: left;
    &::after { // ghost
      content: '\00a0';
      display: inline-block;
      float: right;
      width: var(--dwhandleheight, 3em);
    }
  }
}
#dresserRgt {
  right: 0;
  .handle {
    transform: rotate(90deg) translateX(calc(-1*var(--tstborderwidth)));
    transform-origin: top left; // order matters with transforms
  }
  .drawerTop, .drawerBot {
    float: right;
    &::before { // ghost
      content: '\00a0';
      display: inline-block;
      float: left;
      width: var(--dwhandleheight, 3em);
    }
  }
}
.drawerTop, .drawerBot {
  position: relative; // on parent of .handle w/position: absolute;
  display: inline-block;
  background-color: silver;
  input[type=checkbox] {
    display: none; // hides checkboxes
    &:not(:checked) ~ .panel { display: none; } // not checked = shut
    &:checked ~ .panel { display: inline-block; } // checked = open
    &:checked + label i.fas { transform: rotate(180deg); }
  }
  .handle {
    border: inherit;
    position: absolute;
    background-color: inherit;
    max-height: var(--dwhandleheight, 3em);
    overflow: hidden; // wishlist: #dresserLft .handle li { direction: rtl; }
    text-align: center;
    ul { width: 100%; } // decided against inherit
    ul, li { padding: var(--defsplitpaddng, 0.5em); }
    li { display: inline-block; } // flexbox ignores { float: right; } elements
    li.endLft { float: left; }
    li.endRgt { float: right; }
  }
}
#beacon .panel { width: var(--panelwidthbeac); }
#itts .panel { width: var(--panelwidthitts); }
#pois .panel { width: var(--panelwidthpois); }
#wallet .panel { width: var(--panelwidthwall); }